<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://wmatson.github.io' rel='self' type='application/rss+xml'/>
<title>
Wrangled Ramblings
</title>
<link>
https://wmatson.github.io
</link>
<description>
A blog of my ramblings, mostly GURPS-related, including my custom settings.
</description>
<lastBuildDate>
Thu, 14 Jun 2018 03:44:11 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
https://wmatson.github.io/wrangled-ramblings/posts-output/why-gurps/
</guid>
<link>
https://wmatson.github.io/wrangled-ramblings/posts-output/why-gurps/
</link>
<title>
Why GURPS
</title>
<description>
&lt;hr/&gt;&lt;p&gt;As with all things for which multiple options exist, I choose GURPS over other tabletop RPG systems because I personally prefer it. However, as someone who likes to think of themselves as rational, I have some reasons.&lt;/p&gt;&lt;p&gt;I'll get into some explanation of the system as I go, but I won't get terribly deep as I'm not writing a book.&lt;/p&gt;&lt;hr/&gt;&lt;h3 id=&quot;predictability&quot;&gt;Predictability&lt;/h3&gt;&lt;p&gt;One of my core annoyances with DnD and Pathfinder is the handling of Critical Misses/Hits. I don't trip once every 20 steps, just as much as I don't have profound insights every 20 thoughts. Sure hit confirmation can lower the impact (5% -&gt; .25%), but bad rolls in general are not only easy, they feel common.&lt;/p&gt;&lt;p&gt;In d20 systems, all probabilities lie on a flat line. GURPS, on the other hand, uses 3d6 for most rolls. This results in a nice bell curve of possibility. As a result, skills can more easily be modeled to reflect their various learning curves and properly have diminishing returns on improvement.&lt;/p&gt;&lt;p&gt;Additionally, succeeding/failing by more then 10 counts as a critical.  I always thought it weird in other systems that masters and novices at any given skill had equal chances of critically succeeding and critically failing.&lt;/p&gt;&lt;p&gt;As a GM, it's also nice to have a good feeling of &quot;it's usually a roll of 12 or less&quot;, especially when rolling for pure luck or making an encounter table.&lt;/p&gt;&lt;hr/&gt;&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;&lt;p&gt;GURPS has some disadvantages as a system, but that's not what I'm talking about.&lt;/p&gt;&lt;p&gt;In GURPS, a character can have certain mental, physical, and social disadvantages.  These function in a reasonable way as compared to a real person.&lt;/p&gt;&lt;p&gt;As both a player and a GM, the concept of disadvantages in an RPG is intriguing in its own right. Rather than playing a character as afraid of spiders just to be obtuse and challenge myself, I can write it down on the sheet in a binding way; I'll even get extra character points to spend on other things!&lt;/p&gt;&lt;p&gt;Some example disadvantages:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Missing Limbs&lt;/li&gt;&lt;li&gt;Code of Honor&lt;/li&gt;&lt;li&gt;Phobias&lt;/li&gt;&lt;li&gt;Being part of a subjugated class/race&lt;/li&gt;&lt;li&gt;Clumsiness&lt;/li&gt;&lt;li&gt;Sadism&lt;/li&gt;&lt;li&gt;Honesty&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note how disadvantages don't strictly have to &lt;em&gt;evil&lt;/em&gt; traits. Many of them are traits expected of a &lt;em&gt;good&lt;/em&gt; person. Anything that limits your choices, be it kindness, clumsiness, curiosity, or just plain smelling bad, is a disadvantage.&lt;/p&gt;&lt;p&gt;Whenever I create a new character, I start with the disadvantages.  From my point of view, it's our limits that define us, so why should it be anything else that defines our characters?&lt;/p&gt;&lt;hr/&gt;&lt;h3 id=&quot;flexibility&quot;&gt;Flexibility&lt;/h3&gt;&lt;p&gt;I mentioned character points earlier without introducing them as a concept, but they are central to GURPS. Most tabletop RPGs have a concept of character level, character class, and perhaps experience points. In GURPS, there are no classes, no levels, and no experience points.  Those are all replaced by character points.&lt;/p&gt;&lt;p&gt;Character points can be considered the currency of traits.  They go into buying all aspects of a character that are unique  or otherwise cannot be bought with money (as equipment usually can).&lt;/p&gt;&lt;p&gt;Any character, be it an NPC, a Player Character, a Monster, or even a special object,  can be built with character points.  Anything built with points is simply a collection of Attributes, Advantages, Disadvantages, and Skills  (a couple other things exist, but function nearly identical to one of those three).&lt;/p&gt;&lt;p&gt;Instead of having classes like Ranger, we'd instead have a character with: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;High Dexterity and HT (Health, much like Constitution in other games, not to be confused with Hitpoints)&lt;/li&gt;&lt;li&gt;Animal Empathy&lt;/li&gt;&lt;li&gt;Potentially an Ally (for the animal companion)&lt;/li&gt;&lt;li&gt;Several Woodland Survival Skills (Hiking, Climbing, Swimming, Survival (Woodland), Bow, etc)&lt;/li&gt;&lt;li&gt;A Sense of Duty to Nature&lt;/li&gt;&lt;li&gt;Other Stuff&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With this system, it's possible to create any sort of character and progress it in any direction. When talking to newcomers, I like to say &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; You'd only need the core book to make an invisible vampire frog that is blue &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;They usually ask how it's blue if it's invisible, so I mention that there are ways to pierce the veil of invisibility.&lt;/p&gt;&lt;hr/&gt;&lt;h3 id=&quot;progression&amp;#95;curve&quot;&gt;Progression Curve&lt;/h3&gt;&lt;p&gt;As mentioned above, GURPS doesn't have levels.  I personally prefer a gradual improvement to characters,  rather than massive power spikes that aren't directly tied to story events.&lt;/p&gt;&lt;p&gt;The difference between a level 1 character and a level 2 character is huge in most systems. The difference between a 50 point and a 60 point character in GURPS is much much smaller.&lt;/p&gt;&lt;p&gt;With a greater continuity of power, I can more easily design encounters for players. Additionally players don't get bogged down randomly with a bunch of choices and  instead work to improve constantly, just as in real life.&lt;/p&gt;&lt;hr/&gt;&lt;h3 id=&quot;modularity&quot;&gt;Modularity&lt;/h3&gt;&lt;p&gt;As with all things, GURPS isn't perfect.  However, there isn't much interaction between modules and rules. For example, I don't personally care for the social system/skills in GURPS,  I prefer to have my players play their roles to determine outcomes. If someone wants to play a careful or thoughtful character while personally being impulsive, they can pick up the Common Sense advantage to have me politely remind them when they stray.&lt;/p&gt;&lt;p&gt;I can easily drop the social system by just telling players not to take social skills as I don't use them. No classes depend on such skills to be effective because there are no classes. I make some exceptions for ineloquent players that wish to have orators for characters,  but I tend to ask for the gist of what they want to speak about and weigh my decision on NPC reaction based on that far more than their roll.&lt;/p&gt;&lt;p&gt;Additionally, the default magic system is a bit unfaithful to many of my settings, but I can easily substitute in my own. Any &quot;spell&quot; I want available can be phrased as an existing Advantage or skill with several modifiers (I usually still make a special Advantage/Skill for the players to record, but I base its cost on how I can build it out of the existing system).&lt;/p&gt;&lt;p&gt;The core book supports everything from cavemen to star wars in tech, but it's trivial to choose a tech level  or three to lock in for the players.&lt;/p&gt;&lt;hr/&gt;&lt;h2 id=&quot;upcoming&amp;#95;blog&amp;#95;stuff&quot;&gt;Upcoming Blog Stuff&lt;/h2&gt;&lt;p&gt;This was mostly a fluff post. Going forward, I'll have a bit of a series (or at least tag)  on various settings I've made for GURPS. Each one should get a post to explain its motivation and real-world background/history as well as a page to  explain the setting.&lt;/p&gt;
</description>
<pubDate>
Wed, 13 Jun 2018 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://wmatson.github.io/wrangled-ramblings/posts-output/automated-cryogen-gh-pages-deployments/
</guid>
<link>
https://wmatson.github.io/wrangled-ramblings/posts-output/automated-cryogen-gh-pages-deployments/
</link>
<title>
Automated Cryogen Gh Pages Deployments
</title>
<description>
&lt;p&gt;While I was fiddling with getting disqus working, I found that the deployment process to github pages was rather tedious. So I decided to automate it.&lt;/p&gt;&lt;p&gt;A few googles later, I decided to use &lt;a href='https://circleci.com/'&gt;CircleCI&lt;/a&gt; to manage the builds and automatically deploy. Several blog posts on how to do this using CircleCI 1.0 existed already, but when I went to follow one, I quickly realized that 1.0 was deprecated and on its way out of support.&lt;/p&gt;&lt;p&gt;Luckily, &lt;a href='https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/'&gt;someone already did the work&lt;/a&gt; to figure out the process. Unfortunately, their method had a couple issues that I'll explain later. Over the course of experimentation, I found two other resources that proved important: The CircleCI documentation about checkout keys (found &lt;code&gt;https://circleci.com/gh/&amp;lt;your-username&amp;gt;/&amp;lt;your-project&amp;gt;/edit#checkout&lt;/code&gt;, at the time of this writing,  I couldn't find a good link that wasn't project-specific), and &lt;a href='https://github.com/DevProgress/onboarding/wiki/Using-Circle-CI-with-Github-Pages-for-Continuous-Delivery'&gt;the github documentation&lt;/a&gt; on using CircleCI (specifically &lt;code&gt;Creating a machine user&lt;/code&gt; towards the bottom third of the page).&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;While fiddling with the process, I made sure to set my deploy target to a branch other than &lt;code&gt;gh-pages&lt;/code&gt; (I used &lt;code&gt;gh-pages-test&lt;/code&gt; which bares no significance to github) so as not to disturb the currently-working blog site, I'd recommend you do the same.&lt;/p&gt;&lt;hr/&gt;&lt;h2 id=&quot;some&amp;#95;caveats&quot;&gt;Some Caveats&lt;/h2&gt;&lt;p&gt;The &lt;a href='https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/'&gt;blog I followed along&lt;/a&gt; had a couple issues.&lt;/p&gt;&lt;h4 id=&quot;node&amp;#95;instead&amp;#95;of&amp;#95;clojure&quot;&gt;Node instead of Clojure&lt;/h4&gt;&lt;p&gt;&lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt; uses Clojure (specifically &lt;a href='https://leiningen.org/'&gt;Leiningen&lt;/a&gt; to build the blog site. As a result, I needed to merge the config.yml in &lt;a href='https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/'&gt;the blog&lt;/a&gt; with &lt;a href='https://circleci.com/docs/2.0/language-clojure/#sample-configuration'&gt;CircleCI's Clojure example&lt;/a&gt;  (I used the one generated when initially setting up a project, which I couldn't quickly find a link to it's the same before &lt;code&gt;run: lein do ...&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Additionally, the deploy process ran &lt;code&gt;npm run build&lt;/code&gt; which won't work with a Clojure project/CircleCI image.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;...

git checkout $TARGET&amp;#95;BRANCH || git checkout --orphan $TARGET&amp;#95;BRANCH
git rm -rf .
cd ..

npm run build

cp -a build/. out/.

mkdir -p out/.circleci &amp;amp;&amp;amp; cp -a .circleci/. out/.circleci/.
cd out

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I removed the &lt;code&gt;npm run build&lt;/code&gt; line entirely, opting to build before the deploy process. Instead, I opted to build using &lt;code&gt;lein run&lt;/code&gt; (This runs the project's main method, Cryogen projects' main builds the blog). This replaced &lt;code&gt;lein do test, uberjar&lt;/code&gt; in the configuration.&lt;/p&gt;&lt;p&gt;You can find my final/current working config &lt;a href='https://github.com/wmatson/wrangled-ramblings/blob/master/.circleci/config.yml'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&quot;environment&amp;#95;misconfiguration&quot;&gt;Environment Misconfiguration&lt;/h4&gt;&lt;p&gt;First, in their &lt;code&gt;config.yml&lt;/code&gt; snippet, there was some configuration in the &lt;code&gt;environment&lt;/code&gt; tag that I had to change for reasons beyond me.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    environment:
      - SOURCE&amp;#95;BRANCH: master
      - TARGET&amp;#95;BRANCH: gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;should be&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    environment:
      SOURCE&amp;#95;BRANCH: master
      TARGET&amp;#95;BRANCH: gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;notice the now-missing hyphens.&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;Overall, this was an interesting experience, I had enough fun/focus that I lost track of time and went to bed hungry. Here's my final CircleCI &lt;code&gt;config.yml&lt;/code&gt; at the time of this writing:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;version: 2
jobs:
  build:
    branches:
      ignore:
        - gh-pages
    docker:
      # specify the version you desire here
      - image: circleci/clojure:lein-2.7.1

    working&amp;#95;directory: &amp;#126;/repo

    environment:
      LEIN&amp;#95;ROOT: &amp;quot;true&amp;quot;
      # Customize the JVM maximum heap limit
      JVM&amp;#95;OPTS: -Xmx3200m
      SOURCE&amp;#95;BRANCH: master
      TARGET&amp;#95;BRANCH: gh-pages

    steps:
      - checkout

      # Download and cache dependencies
      - restore&amp;#95;cache:
          keys:
          - v1-dependencies-{{ checksum &amp;quot;project.clj&amp;quot; }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save&amp;#95;cache:
          paths:
            - &amp;#126;/.m2
          key: v1-dependencies-{{ checksum &amp;quot;project.clj&amp;quot; }}

      - run: lein run

      - deploy:
          name: Deploy
          command: |
            if &amp;#91; $CIRCLE&amp;#95;BRANCH == $SOURCE&amp;#95;BRANCH &amp;#93;; then
              git config --global user.email $GH&amp;#95;EMAIL
              git config --global user.name $GH&amp;#95;NAME

              git clone $CIRCLE&amp;#95;REPOSITORY&amp;#95;URL out

              cd out
              git checkout $TARGET&amp;#95;BRANCH || git checkout --orphan $TARGET&amp;#95;BRANCH
              git rm -rf .
              cd ..

              cp -a resources/public/wrangled-ramblings/. out/.

              mkdir -p out/.circleci &amp;amp;&amp;amp; cp -a .circleci/. out/.circleci/.
              cd out

              git add -A
              git commit -m &amp;quot;Automated deployment to GitHub Pages: ${CIRCLE&amp;#95;SHA1}&amp;quot; --allow-empty

              git push origin $TARGET&amp;#95;BRANCH
            fi
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Fri, 08 Jun 2018 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://wmatson.github.io/wrangled-ramblings/posts-output/my-first-cryogen-blog/
</guid>
<link>
https://wmatson.github.io/wrangled-ramblings/posts-output/my-first-cryogen-blog/
</link>
<title>
My First Cryogen Blog
</title>
<description>
&lt;p&gt;This is my first blog in a long time. &lt;/p&gt;&lt;p&gt;It will probably not be well-structured, regular-posted, or even coherent at times, but it'll be mine.&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;When I first discovered &lt;a href='http://cryogenweb.org/index.html'&gt;cryogen&lt;/a&gt;,  I felt the need to start something creative again. I've tried to start a few blogs here and there, but never really kept to them, largely due to the lack of control I felt with most aspects of the site and with the arcane &quot;deploy&quot; setups I saw. The ties to Clojure introduced me and the principles behind it hooked me. Particularly, the ability to host it on github.io stood out to me.&lt;/p&gt;&lt;h3 id=&quot;some&amp;#95;background&amp;#95;on&amp;#95;me&quot;&gt;Some Background On Me&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Software Engineer of 5 years in industry&lt;/li&gt;&lt;li&gt;Started programming at the age of 6&lt;/li&gt;&lt;li&gt;Like many Clojurists, I use emacs&lt;/li&gt;&lt;li&gt;Avid &lt;a href='https://en.wikipedia.org/wiki/GURPS'&gt;GURPS&lt;/a&gt; GM (maybe a player someday)&lt;/li&gt;&lt;li&gt;Head full of nonsense&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h4 id=&quot;deviations&amp;#95;from&amp;#95;default&amp;#95;cryogen&quot;&gt;Deviations From Default Cryogen&lt;/h4&gt;&lt;p&gt;I've made only minimal edits to the default available themes at this point, mostly inverting colors and setting the code theme to &lt;a href='https://github.com/jonathanchu/atom-one-dark-theme'&gt;atom-one-dark&lt;/a&gt;, the theme I use in emacs. You can find the source code in &lt;a href='https://github.com/wmatson/wrangled-ramblings'&gt;this github repo&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;While doing my research in getting markdown to work in  emacs (I'm using &lt;a href='https://jblevins.org/projects/markdown-mode/'&gt;markdown-mode&lt;/a&gt; and &lt;a href='https://pandoc.org/'&gt;pandoc&lt;/a&gt;) and get started with cyrogen, I stumbled upon &lt;a href='http://blog.bradlucas.com/posts/2017-06-09-blogging-with-cryogen/'&gt;this blog post&lt;/a&gt;, which inspired me to automate some of the expected tedium. His &lt;code&gt;new-post&lt;/code&gt; emacs function  used a function or two that weren't in &lt;a href='https://github.com/wmatson/emacs-config'&gt;my setup&lt;/a&gt;,  so I decided to create one of my own using my current favorite language, Clojure.&lt;/p&gt;&lt;h2 id=&quot;cyrogen&amp;#95;post&amp;#95;creation&amp;#95;function&amp;#95;(in&amp;#95;clojure)&quot;&gt;Cyrogen Post Creation Function (in Clojure)&lt;/h2&gt;&lt;p&gt;Many clojure projects that I've started include a &lt;code&gt;user.clj&lt;/code&gt;.  This file/namespace is only loaded at dev-time and includes various functions that may be useful during development of a project. The default Cryogen template includes no such file, as it's intended to be used by anyone by running a terminal command.&lt;/p&gt;&lt;p&gt;I decided to instead use my handy-dandy Clojure REPL for running the blog server while creating posts. This was as simple as using &lt;code&gt;ring-jetty-adapter&lt;/code&gt; much as outlined &lt;a href='https://github.com/ring-clojure/ring/wiki/Getting-Started'&gt;here&lt;/a&gt;. I did a little more fiddling to get things running as they would from the terminal command and ended up with the following in my user.clj&lt;/p&gt;&lt;h5 id=&quot;user.clj&quot;&gt;user.clj&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns user
  &amp;#40;:require &amp;#91;ring.adapter.jetty :as jetty&amp;#93;
            &amp;#91;cryogen.server :refer &amp;#91;handler init&amp;#93;&amp;#93;
            &amp;#91;cryogen-core.compiler :refer &amp;#91;read-config&amp;#93;&amp;#93;

&amp;#40;defonce server &amp;#40;atom nil&amp;#41;&amp;#41;

&amp;#40;defn start-server
  &amp;#40;&amp;#91;&amp;#93; &amp;#40;start-server 3000&amp;#41;&amp;#41;
  &amp;#40;&amp;#91;port&amp;#93;
   &amp;#40;when-not @server
     &amp;#40;init&amp;#41;
     &amp;#40;reset! server &amp;#40;jetty/run-jetty handler {:port port :join? false}&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn stop-server &amp;#91;&amp;#93;
  &amp;#40;when @server
    &amp;#40;.stop @server&amp;#41;
    &amp;#40;reset! server nil&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I'm certain there are smarter ways to do this, but it works for me and allows me to easily start and stop the server on any port.&lt;/p&gt;&lt;p&gt;Back to the task at hand.&lt;/p&gt;&lt;p&gt;I decided to respect the &lt;code&gt;config.edn&lt;/code&gt; provided by cryogen, for the most part. This should make things a little more usable for the next person to follow, but it also makes the task more interesting.&lt;/p&gt;&lt;p&gt;Reading through the default installation's &lt;a href='https://github.com/wmatson/wrangled-ramblings/blob/7942ef3fbbe767f624647531c0f99dc95624bea9/src/cryogen/server.clj'&gt;source code&lt;/a&gt;, I noticed the function &lt;code&gt;read-config&lt;/code&gt; and ran it through my REPL to find the config I was expecting.&lt;/p&gt;&lt;p&gt;For convenience, I added a couple of libraries to my project.clj:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                &amp;#91;ring/ring-devel &amp;quot;1.6.3&amp;quot;&amp;#93;
                &amp;#91;compojure &amp;quot;1.6.0&amp;quot;&amp;#93;
                &amp;#91;ring-server &amp;quot;0.5.0&amp;quot;&amp;#93;
                &amp;#91;cryogen-markdown &amp;quot;0.1.7&amp;quot;&amp;#93;
                &amp;#91;cryogen-core &amp;quot;0.1.61&amp;quot;&amp;#93;
                ;; user function dependencies
                &amp;#91;ring/ring-jetty-adapter &amp;quot;1.6.3&amp;quot;&amp;#93;
                &amp;#91;clj-time &amp;quot;0.14.4&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I know these should be in a &lt;code&gt;:dev&lt;/code&gt; profile, as should the loading of user.clj (rather than putting it in the &lt;code&gt;src/&lt;/code&gt; folder), but I was lazy at the time.&lt;/p&gt;&lt;p&gt;So, for some forewarning to any Clojurists reading this,  my personal style is full of newlines, often in places that I don't see commonly in other people's code. This of course, increases my line count significantly, but I find it makes things more readable and maintainable, personally. It also gives me the ability to use some fun tricks with &lt;a href='https://shaunlebron.github.io/parinfer/'&gt;parinfer&lt;/a&gt; that I may explain in some other post.&lt;/p&gt;&lt;p&gt;Anyway, this is getting long, so here's the code. Maybe I'll do a more thorough breakdown of it another time:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns user
  &amp;#40;:require &amp;#91;ring.adapter.jetty :as jetty&amp;#93;
            &amp;#91;cryogen.server :refer &amp;#91;handler init&amp;#93;&amp;#93;
            &amp;#91;clojure.java.io :as io&amp;#93;
            &amp;#91;clj-time.core :as time&amp;#93;
            &amp;#91;clojure.string :as str&amp;#93;
            &amp;#91;clojure.pprint :refer &amp;#91;pprint&amp;#93;&amp;#93;
            &amp;#91;cryogen-core.compiler :refer &amp;#91;read-config&amp;#93;&amp;#93;
            &amp;#91;clj-time.format :as tformat&amp;#93;&amp;#41;&amp;#41;

;;Omitting the server stuff for brevity/lack of duplication

&amp;#40;def base-opts {:layout :post
                :tags &amp;#91;&amp;quot;&amp;quot;&amp;#93;
                :toc false}&amp;#41;

&amp;#40;def base-text
  &amp;quot;###Header
Some Text&amp;quot;&amp;#41;

&amp;#40;def base-dir &amp;quot;resources/templates/md/&amp;quot;&amp;#41;

&amp;#40;defn- today-str &amp;#91;config&amp;#93;
  &amp;#40;-&amp;gt; config
      :post-date-format
      tformat/formatter
      &amp;#40;tformat/unparse-local-date &amp;#40;time/today&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn new-post-template &amp;#91;config title&amp;#93;
  &amp;#40;let &amp;#91;opts &amp;#40;assoc base-opts
                    :title title
                    :date &amp;#40;today-str config&amp;#41;&amp;#41;
        pp-opts &amp;#40;with-out-str &amp;#40;pprint opts&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;str pp-opts &amp;quot;\n\n&amp;quot; base-text&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn title-&amp;gt;filename &amp;#91;title&amp;#93;
  &amp;#40;-&amp;gt; title
      str/lower-case
      &amp;#40;str/replace #&amp;quot; +&amp;quot; &amp;quot;-&amp;quot;&amp;#41;
      &amp;#40;str &amp;quot;.md&amp;quot;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn new-post! &amp;#91;title&amp;#93;
  &amp;#40;let &amp;#91;config &amp;#40;read-config&amp;#41;
        template &amp;#40;new-post-template config title&amp;#41;
        out-location &amp;#40;str base-dir &amp;#40;:post-root config&amp;#41; &amp;quot;/&amp;quot; &amp;#40;title-&amp;gt;filename title&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;spit &amp;#40;io/file out-location&amp;#41; template&amp;#41;&amp;#41;&amp;#41;

;; &amp;#40;new-post! &amp;quot;My First Cryogen Blog&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This has plenty of room for improvement and I encourage anyone to contribute. By far, the biggest drawback I have using this method as opposed to the one posted in &lt;a href='http://blog.bradlucas.com/posts/2017-06-09-blogging-with-cryogen/'&gt;the inspiration for it&lt;/a&gt; is that I still have to open a new buffer to begin editing.&lt;/p&gt;
</description>
<pubDate>
Wed, 23 May 2018 00:00:00 +0000
</pubDate>
</item>
</channel>
</rss>
